generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique @db.VarChar(191) 
  password String

  role UserRole @default(PENDING)
  tokenVersion Int @default(1)

  times Time[]
  teams UserTeam[]

  hashedRefreshToken String?

  @@index([role], name: "idx_user_role")
  @@index([email, role], name: "idx_user_email_role")
  @@map("User")
}

enum UserRole {
  ADMIN
  ENABLER
  COLLABORATOR
  PENDING
}

model UserTeam {
  userId Int
  teamId String
  user   User   @relation(fields: [userId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])

  @@id([userId, teamId])
  @@index([userId], name: "idx_userteam_userid")
  @@index([teamId], name: "idx_userteam_teamid")
}

model Team {
  id   String @id
  name String

  users    UserTeam[]
  projects Project[]
  rates    Rate[]
  issues   Issue[]
}

model Rate {
  id     Int    @id @default(autoincrement())
  name   String
  teamId String
  rate   Int

  team  Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  times Time[]
}

model Project {
  id            String  @id
  estimatedTime Int?
  name          String
  teamId        String
  createdAt     String
  updatedAt     String
  description   String?
  state         String
  startDate     String?
  targetDate    String?

  time Time[]

  issues Issue[]
  team   Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Time {
  id               Int       @id @default(autoincrement())
  startTime        DateTime
  endTime          DateTime?
  userId           Int
  projectId        String
  rateId           Int?
  totalElapsedTime Int

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  rate    Rate?   @relation(fields: [rateId], references: [id])
}

model Issue {
  id            String  @id
  createdAt     String
  updatedAt     String
  title         String
  dueDate       String?
  projectId     String
  priorityLabel String
  identifier    String
  assigneeName  String?
  projectName   String
  state         String
  teamKey       String?
  teamName      String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team    Team?   @relation(fields: [teamKey], references: [id], onDelete: SetNull)
  labels  Label[]
}

model Label {
  id       String
  color    String
  name     String
  parentId String?
  issueId  String

  issue      Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  internalId Int   @id @default(autoincrement())

  @@index([id, issueId], name: "idx_label_issue")
}
